####################################################
# installArgoCD enable true will install argo-cd,argo-rollouts,argo-workflows,argo-events,argocd-image-updater
installArgoCD: true

#####################################################
# Global Configuration
######################

global:
  # Custom Images registry where all the OSS and customized images used in the helm chart are stored
  # Only update this is using a private repo such as ACR, ECR, GCR, JFrog, etc.
  customImages:
    registry: quay.io/opsmxpublic
  # when this flag is set to false; UI will be accessible over http instead of https
  ssl:
    enabled: false

  # If cert-manager is installed, TLS secrets will created automatically, as an 'Issuer' will be created
  # Else, the TLS secrets will need to created manually
  certManager:
    installed: true

  createIngress: true

  argocd:
    #specify the argo-cd url argocd.ninja-test.opsmx.net
    protocol: http
    host: "argocdtesthelm.ninja-test.opsmx.net"

    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
      tls:
        secretName: argocd-tls-certificate

  argoworkflows:
    #specify the argoworkflows url like argoworkflows.ninja-test.opsmx.net
    host: "argoworktesthelm.ninja-test.opsmx.net"
    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
      tls:
        secretName: argocd-workflow-tls-certificate

  ## Node Selection rules for all the OEA components (db, Autopilot, Sapor, Dashboard, Visibility, Audit, Datascience, Platform, Ui, Forwarder, Gate...)
  nodeSelector: {}
  affinity: {}
  tolerations: []

  enableCentralMonitoring: false

  ###############################################################################
  # Set it to false if own LDAP is to be configured
  installOpenLdap: true

  ## ldap configuration used for authentication and authorization
  ldap:
    enabled: false
    url: ldap://openldap:389
    managerDn: cn=admin,dc=example,dc=org
    managerPassword: opsmxadmin123
    groupSearchBase: ou=groups,dc=example,dc=org
    groupSearchFilter: member={0}
    groupRoleAttributes: cn
    userDnPattern: cn={0},dc=example,dc=org

###################################################
# argo-cd configuration
#######################

argo-cd:
  dex:
    env:
      - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: argo-workflows-sso
            key: client-secret
  server:
    extraArgs:  # Ensure that the server is http by default. The TLS termination can happen anywhere
      - --insecure
    ### To use LDAP enable config 
    configEnabled: true
    ########   ldap argc-cm configmap configuration     #######
    config: 
      # Argo CD's externally facing base URL. Required when configuring SSO
      url: "http://argocdtesthelm.ninja-test.opsmx.net" ## Provide ArgoCD url like https://argocd.ninja-test.opsmx.net"
      # admin.enabled indicates whether the admin user is enabled. It is enabled by default.
      admin.enabled: "false"
      dex.config: |-
        staticClients:
        - id: argo-workflows-sso
          name: Argo Workflow
          redirectURIs:
            - http://argoworktesthelm.ninja-test.opsmx.net/oauth2/callback ##Need to update url manually ArgoWorkflowurl Example: https://argoworkflow.ninja-test.opsmx.net/oauth2/callback
          secretEnv: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
        connectors:
        - type: ldap
          name: opsmx-openldap
          id: ldap
          config:
            host: "openldap:389"
            insecureNoSSL: true
            insecureSkipVerify: true
            # Variable name stores ldap bindDN in argocd-secret
            bindDN: "cn=admin,dc=example,dc=org"
            # Variable name stores ldap bind password in argocd-secret
            bindPW: "opsmxadmin123"
            usernamePrompt: Username
            # Ldap user serch attributes
            userSearch:
              baseDN: "dc=example,dc=org"
              filter: "(objectClass=simpleSecurityObject)"
              username: cn
              idAttr: cn
              emailAttr: cn
              nameAttr: cn
            # Ldap group serch attributes
            groupSearch:
              baseDN: "dc=example,dc=org"
              filter: "(objectClass=simpleSecurityObject)"
              userAttr: cn
              groupAttr: cn
              nameAttr: cn
#        - type: saml
#          name: okta
#          id: okta
#          config:
#            ssoURL: https://dev-80355908.okta.com/app/dev-80355908_argo22_1/exk65lw6suc3YgstT5d7/sso/saml
#            redirectURI: https://dev-80355908.okta.com/app/dev-80355908_argo22_1/exk65lw6suc3YgstT5d7/sso/saml
#            usernameAttr: email
#            emailAttr: email
#            groupsAttr: group
#            caData: | 
#              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lHQVlLVThYcWJN
#              QTBHQ1NxR1NJYjNEUUVCQ3dVQU1JR1VNUXN3Q1FZRFZRUUdFd0pWVXpFVE1CRUcNCkExVUVDQXdL
#              UTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnd3TlUyRnVJRVp5WVc1amFYTmpiekVOTUFzR0ExVUVD
#              Z3dFVDJ0MFlURVUNCk1CSUdBMVVFQ3d3TFUxTlBVSEp2ZG1sa1pYSXhGVEFUQmdOVkJBTU1ER1Js
#              ZGkwNE1ETTFOVGt3T0RFY01Cb0dDU3FHU0liM0RRRUoNCkFSWU5hVzVtYjBCdmEzUmhMbU52YlRB
#              ZUZ3MHlNakE0TVRNd01qQXlORGxhRncwek1qQTRNVE13TWpBek5EbGFNSUdVTVFzd0NRWUQNClZR
#              UUdFd0pWVXpFVE1CRUdBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ3d05VMkZ1SUVa
#              eVlXNWphWE5qYnpFTk1Bc0cNCkExVUVDZ3dFVDJ0MFlURVVNQklHQTFVRUN3d0xVMU5QVUhKdmRt
#              bGtaWEl4RlRBVEJnTlZCQU1NREdSbGRpMDRNRE0xTlRrd09ERWMNCk1Cb0dDU3FHU0liM0RRRUpB
#              UllOYVc1bWIwQnZhM1JoTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FR
#              b0MNCmdnRUJBTytsOEIxdXIzd1ZBbHBiZGhJYmg4Nk1XMk5wQ3gyb0VhZ1g4UkxxeTc3bVYxdHdk
#              aTQxMldYNVpTaU9BQ2toVG9XaUlIZW0NCjRwZ3VMK3drUk9lcnZlRVJ0cXdudU5OL2ROUnlkdXVD
#              UDlqcGNEYVd5NHdaeWxiQmF2TDF3blFJaHgrc3J1akh1M2lmUUdSUUtxUG4NCjI1S3Nway9OaEUv
#              VTBpTlFSNWRFZzI5aHBCakpESjNaayt2eXNDLzNZdmFJM2lmWXBDMGtaTVBLSEt6bC9yYXRYaSt6
#              aVZuNlBCSmkNCnh2T2pnOUd2cVE3YkRSbTAyRyt2bmh1T1RxdjEwQ0g3WC9hNEc1WVhPTWhucW9O
#              M2MvclRJdjlSQjFncXVUZnFHWE1FSGtWbW1jS3ANCmxpYTZURUQ4bWFGUWRwajBRWXFDWXRYK2hw
#              R05GK0k0aHhxNGw4SDN4ZTBDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUENCkx4WWg1
#              RlZmWThSY2FoQzJkQXlOMi8zb3pCV2ZhVjF3aXdMQW9qaHVDWVpKREVDdUpVekZPK2hZYm9sakRS
#              bmtFb2tpYThwWXJSUEwNCjdSU0tlYkIwcTVTdEcrV1RPcTg2SmlPQk1wVlR5V1dYSEFHN0ppY2tT
#              T1N2QXkwdncyeVkzT0IwdEE0ZUpWSXVpZFVTUnpTckdNNW0NCllma2hjaFBhNnNZTU9GSGtLOUxG
#              TzNsbjFEZE9JbkJST2hrL1QyL0locXBJL3hwWTlEdCsxNTcxRWExY2ROUjFRd1k2VFRVL013N2oN
#              ClpEZ21LaWhSNDNJenhwaVRLT09hVU1LYlN5RHFjcWpjdTEwaUJ3cmpVUmtzTzFmc3JqNEtXZFJ4
#              aVRpODFOZjFINytUcmJRMldVeG8NCjFncGVBWE9Rd2M2RHp0TlN2b1lQaFpHQmdNeTVjcWQ0TWwr
#              WWNnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K



    ################# groups and user permission in argcd-rbac-cm configmap configuration ################
    # -- Argo CD rbac config ([Argo CD RBAC policy])
    rbacConfig:
      {}
      # policy.csv is a file containing user-defined RBAC policies and role definitions (optional).
      # Policy rules are in the form:
      #   p, subject, resource, action, object, effect
      # Role definitions and bindings are in the form:
      #   g, subject, inherited-subject
  notifications:
    enabled: true
    argocdUrl: "argocdtesthelm.ninja-test.opsmx.net"  # Provide ArgoCd Url like argocd.ninja-test.opsmx.net
    secret:
      items:
       email-password: nopass    ## Provide Plain password emailpassword
       email-username: bogus   ## Provide plain email email.example.com
       #jenkins-password:
       #jenkins-username:
       #jira-password:
       #jira-username:
       #slack-token:
    context: {}
    notifiers:
      #service.slack: |
        #apiURL: <url>                 # optional URL, e.g. https://example.com/api
        #token: $slack-token
        #username: <override-username> # optional username
        #icon: <override-icon> # optional icon for the message (supports both emoij and url notation)
      service.email.gmail: |
        username: $email-username
        password: $email-password
        host: smtp.gmail.com
        port: 465
        from: $email-username
    subscriptions: []
    triggers:
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.sync.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          send:
          - app-sync-running
          when: app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          send:
          - app-sync-succeeded
          when: app.status.operationState.phase in ['Succeeded']

      defaultTriggers: |
        - on-sync-status-unknown
    templates:
      template.app-deployed: |
        email:
          subject: New version of an application {{.app.metadata.name}} is up and running.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        slack:
          attachments: |
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              },
              {
                "title": "Revision",
                "value": "{{.app.status.sync.revision}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-health-degraded: |
        email:
          subject: Application {{.app.metadata.name}} has degraded.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#f4c030",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-failed: |
        email:
          subject: Failed to sync application {{.app.metadata.name}}.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-running: |
        email:
          subject: Start syncing application {{.app.metadata.name}}.
        message: |
          The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#0DADEA",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-status-unknown: |
        email:
          subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          {{if ne .serviceType "slack"}}
          {{range $c := .app.status.conditions}}
              * {{$c.message}}
          {{end}}
          {{end}}
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#E96D76",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-succeeded: |
        email:
          subject: Application {{.app.metadata.name}} has been successfully synced.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        slack:
          attachments: |-
            [{
              "title": "{{ .app.metadata.name}}",
              "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }
              {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "title": "{{$c.type}}",
                "value": "{{$c.message}}",
                "short": true
              }
              {{end}}
              ]
            }]
      template.app-sync-status: |
        message: |
          Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        slack:
          attachments: |
            [{
              "title": "{{.app.metadata.name}}",
              "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
              "color": "#18be52",
              "fields": [{
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              }, {
                "title": "Repository",
                "value": "{{.app.spec.source.repoURL}}",
                "short": true
              }]
            }]


###################################################
# argo-workflows configuration
#######################

argo-workflows:
  server:
    extraArgs:
      - --auth-mode=sso
    sso:
     #issuerAlias: http://cd.ryzon7-argo22.opsmx.org/api/dex   # Update if only saml ArgoCd url Example: https://argocd.ninja-test.opsmx.net/api/dex
      issuer: http://argocdtesthelm.ninja-test.opsmx.net/api/dex   # ArgoCd url Example: https://argocd.ninja-test.opsmx.net/api/dex
      # sessionExpiry defines how long your login is valid for in hours. (optional, default: 10h)
      sessionExpiry: 240h
      clientId:
        name: argo-workflows-sso
        key: client-id
      clientSecret:
        name: argo-workflows-sso
        key: client-secret
      redirectUrl: http://argoworktesthelm.ninja-test.opsmx.net/oauth2/callback  ##Argoworkflows url Example: https://argoworkflow.ninja-test.opsmx.net/oauth2/callback

###################################################
# argo-events configuration
#######################

argo-events:
  crds:
    # Default set to true . Set to false if crds already exists in the cluster instead of deleting the CRDs
    install: true
    # -- Keep CRDs on chart uninstall
    keep: false

###################################################
# argo-rollouts configuration
#######################

argo-rollouts:
  # Default set to true . Set to false if crds already exists in the cluster instead of deleting the CRDs
  installCRDs: true
  #Set to false if crds to be deleted as part of helm uninstall
  keepCRDs: false
  notifications:
    secret:
      # -- Whether to create notifications secret
      create: true
      # -- Generic key:value pairs to be inserted into the notifications secret
      items: {}
        # slack-token:
  
    # -- Configures notification services
    notifiers: {}
      # service.slack: |
      #   token: $slack-token
  
    # -- Notification templates
    templates: {}
      # template.my-purple-template: |
      #   message: |
      #     Rollout {{.rollout.metadata.name}} has purple image
      #   slack:
      #       attachments: |
      #           [{
      #             "title": "{{ .rollout.metadata.name}}",
      #             "color": "#800080"
      #           }]
  
    # -- The trigger defines the condition when the notification should be sent
    triggers: {}
      # trigger.on-purple: |
      #   - send: [my-purple-template]
      #     when: rollout.spec.template.spec.containers[0].image == 'argoproj/rollouts-demo:purple'

  dashboard:
   # -- Deploy dashboard server
   enabled: true
   # -- Value of label `app.kubernetes.io/component`
   component: rollouts-dashboard
  
######################################################################
opa:
  enabled: false  
  image:
    repository: openpolicyagent/opa
    tag: latest
    pullPolicy: IfNotPresent

###############################################################
## Name of the secret for pulling images from container registry.
## Use it when the images are stored under private registry.
## Create this secret before installing the chart
imagePullSecret: ""

####################################################
# AP installs a trial LDAP for POCs and testing purposes
# OpenLDAP custom configuration; will override default configuration of openldap helm chart
openldap:
  # Password for the admin user; by default it is set to admin
  adminPassword: opsmxadmin123
  configPassword: opsmxconfig123
  omitClusterIP: true
  affinity: {}
  tolerations: []

  persistence:
    enabled: true
  env:
    LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"

  customLdifFiles:
    01-memberof.ldif: |-
      dn: cn=module,cn=config
      cn: module
      objectClass: olcModuleList
      olcModuleLoad: memberof.la
      olcModulePath: /usr/lib/ldap
      dn: olcOverlay={0}memberof,olcDatabase={1}hdb,cn=config
      objectClass: olcConfig
      objectClass: olcMemberOf
      objectClass: olcOverlayConfig
      objectClass: top
      olcOverlay: memberof
      olcMemberOfDangling: ignore
      olcMemberOfRefInt: TRUE
      olcMemberOfGroupOC: groupOfNames
      olcMemberOfMemberAD: member
      olcMemberOfMemberOfAD: memberOf
    02-refint1.ldif: |-
      dn: cn=module{1},cn=config
      changetype: modify
      add: olcmoduleload
      olcmoduleload: refint.la
    03-refint2.ldif: |-
      dn: olcOverlay={1}refint,olcDatabase={1}hdb,cn=config
      objectClass: olcConfig
      objectClass: olcOverlayConfig
      objectClass: olcRefintConfig
      objectClass: top
      olcOverlay: {1}refint
      olcRefintAttribute: memberof member manager owner
    04-add_ou.ldif: |-
      dn: ou=groups,dc=example,dc=org
      objectClass: organizationalUnit
      ou: Groups
    05-admin.ldif: |-
      dn: cn=admin,ou=groups,dc=example,dc=org
      objectClass: groupofnames
      cn: admin
      description: read write and execute group
      member: cn=admin,dc=example,dc=org
    06-developer.ldif: |-
      dn: cn=developers,ou=groups,dc=example,dc=org
      objectClass: groupofnames
      cn: developers
      description: read only users
      member: cn=admin,dc=example,dc=org
      member: cn=developer,dc=example,dc=org
    07-qa.ldif: |-
      dn: cn=QA,ou=groups,dc=example,dc=org
      objectClass: groupofnames
      cn: QA
      description: read only users
      member: cn=admin,dc=example,dc=org
      member: cn=qa,dc=example,dc=org
    08-manager.ldif: |-
      dn: cn=managers,ou=groups,dc=example,dc=org
      objectClass: groupofnames
      cn: managers
      description: read and execute group
      member: cn=admin,dc=example,dc=org
      member: cn=manager,dc=example,dc=org
    09-IT-manager.ldif: |-
      dn: cn=ITManagers,ou=groups,dc=example,dc=org
      objectClass: groupofnames
      cn: ITManagers
      description: read and execute group
      member: cn=admin,dc=example,dc=org
      member: cn=ITManager,dc=example,dc=org
    10-users.ldif: |-
      dn: cn=user1,dc=example,dc=org
      objectClass: simpleSecurityObject
      objectClass: organizationalRole
      cn: user1
      userpassword: {SSHA}Y9L4AsYL16WLK10qDZ62pTScFnaWb0nz
      dn: cn=user2,dc=example,dc=org
      objectClass: simpleSecurityObject
      objectClass: organizationalRole
      cn: user2
      userpassword: {SSHA}DasTBI0eut1F83Bh1F1HXmDT8juJj3pY
      dn: cn=user3,dc=example,dc=org
      objectClass: simpleSecurityObject
      objectClass: organizationalRole
      cn: user3
      userpassword: {SSHA}Qu1FW7BdLMndwM/Gf+zc3a8VIMAymbuv
      dn: cn=developers,ou=groups,dc=example,dc=org
      changetype: modify
      add: member
      member: cn=user1,dc=example,dc=org
      member: cn=user3,dc=example,dc=org
      dn: cn=QA,ou=groups,dc=example,dc=org
      changetype: modify
      add: member
      member: cn=user2,dc=example,dc=org
      member: cn=user3,dc=example,dc=org

#####################################################
# Centralized Logging Configuration
####################################################
# Set to true to install Elastic and Kibana
enableCentralLogging: false

elasticsearch:
  replicas: 1
  minimumMasterNodes: 1
  resources:
    requests:
      cpu: "100m"
      memory: "1Gi"

kibana:
  service:
    type: LoadBalancer
  resources:
    requests:
      cpu: "100m"
      memory: "250Mi"
  lifecycle:
    postStart:
      exec:
        command:
          - bash
          - -c
          - >
            until curl localhost:5601; do echo "Waiting for Kibana to be available..."; sleep 5; done;
            until curl elasticsearch-master:9200; do echo "Waiting for Elasticsearch to be available..."; sleep 5; done;
            sleep 60;
            curl https://raw.githubusercontent.com/OpsMx/enterprise-argo/main/scripts/kibana/kibana_objects.ndjson > /tmp/kibana_objects.ndjson;
            curl -X POST "localhost:5601/api/saved_objects/_import?overwrite=true" -H "kbn-xsrf: true" --form file=@/tmp/kibana_objects.ndjson 2>&1 1> /tmp/postStart.out;
